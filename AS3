// ASN3.c

#include <stdio.h>
#define MAX_TASKS 50
#define RR_SIZE MAX_TASKS
#define QUEUE_SIZE MAX_TASKS
#define MIN(x, y) ((x) < (y) ? (x) : (y))

typedef struct 
{
  char name[80];
  int arriv_time;
  int burst_time;
  int start_time;
  int resume_time;
  int time_to_run;
  int end_time;
} Task;

int ReadTasks(FILE* in, Task tasks[]);
void CopyTasks(Task src[], Task dst[], int size);
void WriteTasks(FILE* out, Task tasks[], int size);
void RunFCFS(Task tasks[], int size, FILE* out);
void RunRR(Task tasks[], int size, FILE* out);
void RunNSJF(Task tasks[], int size, FILE* out);
void RunPSJF(Task tasks[], int size, FILE* out);

void PrintTasks(Task tasks[], int size)
{
  int i;
  printf("%12s%12s%12s%12s%12s\n", "name", "arriv_time", "burst_time", "start_time", "end_time");
  for (i=0; i<size; i++)
    printf("%10s%10d%10d%10d%10d\n", tasks[i].name, tasks[i].arriv_time, tasks[i].burst_time, tasks[i].start_time, tasks[i].end_time);
}


int main()
{
  FILE* in, *out;
  Task tasks[MAX_TASKS], tasks_copy[MAX_TASKS];
  int n_tasks;
  
  in = fopen("TaskSpec.txt", "r");
  n_tasks = ReadTasks(in, tasks_copy);
  fclose(in);
  
  //PrintTasks(tasks_copy, n_tasks);
  
  out = fopen("Output.txt", "w");

  //fprintf(out, "FCFS:\n");
  CopyTasks(tasks_copy, tasks, n_tasks);
  RunFCFS(tasks, n_tasks, out);
  //WriteTasks(out, tasks, n_tasks);

  //fprintf(out, "RR:\n");
  CopyTasks(tasks_copy, tasks, n_tasks);
  RunRR(tasks, n_tasks, out);
  //WriteTasks(out, tasks, n_tasks);  
  
  //fprintf(out, "NSJF:\n");
  CopyTasks(tasks_copy, tasks, n_tasks);
  RunNSJF(tasks, n_tasks, out);
  //WriteTasks(out, tasks, n_tasks);
  
  //fprintf(out, "PSJF:\n");
  CopyTasks(tasks_copy, tasks, n_tasks);
  RunPSJF(tasks, n_tasks, out);
  //WriteTasks(out, tasks, n_tasks);
  
  fclose(out);
  
  return 0;
}

// Read tasks from a file
int ReadTasks(FILE* in, Task tasks[])
{
  int n_tasks=0;
  char buf[100];
  char *p;
  //while (fscanf(in, "%s,%d,%d", &tasks[n_tasks].name, &tasks[n_tasks].arriv_time, &tasks[n_tasks].burst_time) == 3 ) {
  
  while (fgets(buf, 100, in) != NULL) {
    for (p=buf; *p!='\0'; p++) {
      if (*p == ',')
        *p = ' ';
    }
    if (sscanf(buf, "%s%d%d", &tasks[n_tasks].name, &tasks[n_tasks].arriv_time, &tasks[n_tasks].burst_time) == 3 ) {
      tasks[n_tasks].time_to_run = tasks[n_tasks].burst_time;
      tasks[n_tasks].start_time = -1;
      tasks[n_tasks].resume_time = -1;
      tasks[n_tasks].end_time = -1;
 
      n_tasks++;
    }
  }
  return n_tasks;
}

// Copy tasks from src to dst
void CopyTasks(Task src[], Task dst[], int size)
{
  int i;
  
  for (i=0; i<size; i++)
    dst[i] = src[i];
}

// Write results of tasks run to the file
void WriteTasks(FILE* out, Task tasks[], int size)
{
  int i;
  int tot_wait_time=0;
  double avr_wait_time;
  
  for (i=0; i<size; i++) {
    fprintf(out, "%s\t%d\t%d\n", tasks[i].name, tasks[i].start_time, tasks[i].end_time);
    tot_wait_time += tasks[i].end_time - tasks[i].arriv_time - tasks[i].burst_time;
  }
  avr_wait_time = (double) tot_wait_time / size;
  fprintf(out, "Average Waiting Time: %f\n", avr_wait_time);
}

void RunFCFS(Task tasks[], int size, FILE* out)
{
  int t=0;
  int cur_task=0;
  int tot_wait_time = 0;
  double avr_wait_time;
  fprintf(out, "FCFS:\n");
  while (cur_task< size) {
    if (t < tasks[cur_task].arriv_time)
      t = tasks[cur_task].arriv_time;
    tasks[cur_task].start_time = t;
    t += tasks[cur_task].burst_time;
    tasks[cur_task].end_time = t;
    tot_wait_time += tasks[cur_task].end_time - tasks[cur_task].arriv_time - tasks[cur_task].burst_time;
    fprintf(out, "%s\t%d\t%d\n", tasks[cur_task].name, tasks[cur_task].start_time, tasks[cur_task].end_time);
    cur_task++;
  }
  avr_wait_time = (double)tot_wait_time / size;
  fprintf(out, "Average Waiting Time: %f\n", avr_wait_time);
}


void RunRR(Task tasks[], int size, FILE* out)
{
  const int QUANTUM=4;
  int round_robin[RR_SIZE];
  int rr_begin=0, rr_end=0;
  int t=0;
  int cur_task=-1;
  int next_task=0;
  int tot_wait_time = 0;
  double avr_wait_time;

  fprintf(out, "RR:\n");

  round_robin[rr_end++] = next_task++;
  while (next_task < size || rr_begin != rr_end) {
    
    // if round robin is empty wait till next task arrive
    if (rr_begin == rr_end) {
      t = tasks[next_task].arriv_time;
      round_robin[rr_end++] = next_task;
      rr_end %= RR_SIZE;
      continue;
    }
    
    cur_task = round_robin[rr_begin++];
    rr_begin  %= RR_SIZE;
    tasks[cur_task].resume_time = t;
    if (tasks[cur_task].start_time == -1) {
      tasks[cur_task].start_time = t;
    }
    // Check if task use full QUANTUM
    if (tasks[cur_task].time_to_run <= QUANTUM) {
      t += tasks[cur_task].time_to_run;
      tasks[cur_task].time_to_run = 0;
      tasks[cur_task].end_time = t;
      tot_wait_time += tasks[cur_task].end_time - tasks[cur_task].arriv_time - tasks[cur_task].burst_time;
    }
    else {
      t += QUANTUM;
      tasks[cur_task].time_to_run -= QUANTUM;
    }
    fprintf(out, "%s\t%d\t%d\n", tasks[cur_task].name, tasks[cur_task].resume_time, t);

    // Get all task that arrived 
    while (next_task < size && tasks[next_task].arriv_time <= t) {
      round_robin[rr_end++] = next_task;
      rr_end %= RR_SIZE;
      next_task++;
    }

    if (tasks[cur_task].time_to_run) {
      round_robin[rr_end++] = cur_task;
      rr_end %= RR_SIZE;
    }
  }
  avr_wait_time = (double)tot_wait_time / size;
  fprintf(out, "Average Waiting Time: %f\n", avr_wait_time);
}

// Insert a task in the queue in increasing order of their length
void InsertTaskInQueue(Task tasks[], int size, int queue[], int queue_len, int task)
{
  int i, insert;
  for (insert=0; insert<queue_len; insert++) {
    if (tasks[task].time_to_run < tasks[queue[insert]].time_to_run)
      break;
  }
  for (i=queue_len; i>insert; i--)
    queue[i] = queue[i-1];
  queue[insert] = task;  
}

void RunNSJF(Task tasks[], int size, FILE* out)
{
  int queue[QUEUE_SIZE];
  int queue_len=0;
  int t=0;
  int cur_task=-1;
  int next_task=0;
  int i;
  int tot_wait_time = 0;
  double avr_wait_time;

  fprintf(out, "NSJF:\n");
  while (next_task < size || queue_len > 0) {
    // Get all task that arrived
    while (next_task < size && tasks[next_task].arriv_time <= t) {
      InsertTaskInQueue(tasks, size, queue, queue_len, next_task);
      queue_len++;
      next_task++;
    }
    
    // if queue is empty wait till next task arrive
    if (queue_len == 0) {
      t = tasks[next_task].arriv_time;
      continue;
    }
    
    cur_task = queue[0];
    for (i=1; i<queue_len; i++)
      queue[i-1] = queue[i];
    queue_len--;    
    tasks[cur_task].start_time = t;
    t += tasks[cur_task].burst_time;
    tasks[cur_task].end_time = t;
    tot_wait_time += tasks[cur_task].end_time - tasks[cur_task].arriv_time - tasks[cur_task].burst_time;
    fprintf(out, "%s\t%d\t%d\n", tasks[cur_task].name, tasks[cur_task].start_time, t);
  }
  avr_wait_time = (double)tot_wait_time / size;
  fprintf(out, "Average Waiting Time: %f\n", avr_wait_time);
}
void RunPSJF(Task tasks[], int size, FILE* out)
{
  int queue[QUEUE_SIZE];
  int queue_len=0;
  int t=0, t_arriv, t_finish, t_old, tic;
  int cur_task=-1;
  int next_task=0;
  int i;
  int tot_wait_time = 0;
  double avr_wait_time;

  fprintf(out, "PSJF:\n");
  while (next_task < size || cur_task != -1) {
    t_arriv = next_task < size ? tasks[next_task].arriv_time : 999999;
    t_finish = cur_task == -1 ? 999999 : t + tasks[cur_task].time_to_run;
    t_old = t;
    t = MIN(t_arriv, t_finish);
    tic = t - t_old;

    // if a task has finished
    if (t == t_finish) {
      tasks[cur_task].end_time = t;
      fprintf(out, "%s\t%d\t%d\n", tasks[cur_task].name, tasks[cur_task].resume_time, t);
      tot_wait_time += tasks[cur_task].end_time - tasks[cur_task].arriv_time - tasks[cur_task].burst_time;
      if (queue_len) {
        cur_task = queue[0];
        for (i = 1; i < queue_len; i++)
          queue[i - 1] = queue[i];
        queue_len--;
        tasks[cur_task].start_time = t;
        tasks[cur_task].resume_time = t;
      }
      else {
        cur_task = -1;
      }
    }

    // If Event is arrival
    if (t == t_arriv) {
      while (next_task < size && tasks[next_task].arriv_time <= t) {
        InsertTaskInQueue(tasks, size, queue, queue_len, next_task);
        queue_len++;
        next_task++;
      }
      if (cur_task == -1) {
        cur_task = queue[0];
        for (i = 1; i < queue_len; i++)
          queue[i - 1] = queue[i];
        queue_len--;
        tasks[cur_task].start_time = t;
        tasks[cur_task].resume_time = t;
      }
      else {
        // Check for preemptive
        tasks[cur_task].time_to_run -= tic;
        if (tasks[cur_task].time_to_run > tasks[queue[0]].time_to_run) {
          InsertTaskInQueue(tasks, size, queue, queue_len, cur_task);
          fprintf(out, "%s\t%d\t%d\n", tasks[cur_task].name, tasks[cur_task].resume_time, t);
          cur_task = queue[0];
          for (i = 1; i <= queue_len; i++)
            queue[i - 1] = queue[i];
          if (tasks[cur_task].start_time == -1) {
            tasks[cur_task].start_time = t;
          }
          tasks[cur_task].resume_time = t;
        }
      }
    }

  }
  avr_wait_time = (double)tot_wait_time / size;
  fprintf(out, "Average Waiting Time: %f\n", avr_wait_time);
}
