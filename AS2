/*https://stackoverflow.com/questions/23531625/multithreaded-sorting-application accessed 2019/10/28*/

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAXLEN 1024

void *sorter(void *params); /* thread that performs basic sorting algorithm */
void *merger(void *params); /* thread that performs merging of results */

int g_array[500];
/* structure for passing data to threads */
typedef struct
{
   int starting_index;
   int ending_index;
} parameters;

static int cmp_int(const void *p1, const void *p2)
{
   return (*(int *)p1 - *(int *)p2);
}

void swap(int* a, int* b);
void print(int* a, int size);

int main() {
   /* define thread variables */
   pthread_t sorter_thread1, sorter_thread2, merger_thread;
   pthread_attr_t attr;
   const char* input_filename = "IntegerList.txt";
   const char* output_filename = "SortedIntegerList.txt";
   FILE *infile, *outfile;
   char line[MAXLEN];
   int i, j;
   const char* tok;
   
	/* https://www.cs.swarthmore.edu/~newhall/unixhelp/C_files.html accessed 2019/10/26*/
   infile = fopen(input_filename, "r");
   if (infile == NULL){
      fprintf(stderr, "Could not open file: %s", input_filename);
      return 1;
   }
   outfile = fopen(output_filename, "w+");
   if (outfile == NULL){
      fprintf(stderr, "Could not create file: %s", output_filename);
      return 1;
   }
   //reading walues from file
   i = 0;
   while (fgets(line, MAXLEN, infile)) {
      for (tok = strtok(line, ",");
            tok && *tok;
            tok = strtok(NULL, ",\n"))
      {
         g_array[i++] = atoi(tok);
      }
   }
   fclose(infile);
   /* Initialize thread creation attributes */
   if (pthread_attr_init(&attr)) {
      fprintf(stderr, "pthread_attr_init error\n");
      return 1;
   }
   /* https://cboard.cprogramming.com/c-programming/159836-linux-mulithreaded-program-help-please.html accessed 2019/10/27  */
   parameters *data_first = (parameters *) malloc(sizeof(parameters)); 
   parameters *data_second = (parameters *) malloc(sizeof(parameters));

   data_first->starting_index= 0;
   data_first->ending_index = i/2-1;
    
   data_second->starting_index= data_first->ending_index+1;
   data_second->ending_index = i-1;
   /* create the first sorting thread */
   if (pthread_create(&sorter_thread1, &attr, sorter, data_first)) {
      fprintf(stderr, "Error creating sorter thread1.\n");
      return 1;
   }
   /* create the second sorting thread */
   if (pthread_create(&sorter_thread2, &attr, sorter, data_second)) {
      fprintf(stderr, "Error creating sorter thread2.\n");
      return 1;
   }
   /* now wait for the 2 sorting threads to finish */
   if (pthread_join(sorter_thread1, NULL)) {
      fprintf(stderr, "Error joining sorter thread1\n");
      return 2;
   }
   if (pthread_join(sorter_thread2, NULL)) {
      fprintf(stderr, "Error joining sorter thread2\n");
      return 2;
   }
   //print(g_array, i);
   /* establish the merge thread */
   if (pthread_create(&merger_thread, &attr, merger, data_second)) {
      fprintf(stderr, "Error creating merger thread.\n");
      return 1;
   }
   /* wait for the merge thread to finish */
   if (pthread_join(merger_thread, NULL)) {
      fprintf(stderr, "Error joining merger thread\n");
      return 2;
   }
   /* output the sorted array */
   for (j = 0; j < i-1; j++) {
      fprintf(outfile, "%d,", g_array[j]);
   }
   fprintf(outfile, "%d", g_array[j]);
   print(g_array, i);
   free(data_first);
   free(data_second);
   return 0;
}

void *sorter(void *params) {
   /* sorting algorithm implementation */
   parameters *p = (parameters*)params;
   int length = p->ending_index - p->starting_index + 1;
   qsort((g_array + p->starting_index), length, sizeof(int), cmp_int);
   return NULL;
}

void *merger(void *params) {
   /* merging algorithm implementation */
   parameters *p = (parameters*)params;
   int i, first, k;
   for (i = 0; i <= p->starting_index;  i++)
	{
		if (g_array[i] > g_array[p->starting_index])
		{
			swap(&g_array[i], &g_array[p->starting_index]);
			first = g_array[p->starting_index];

			for (k = p->starting_index + 1; k <= p->ending_index && g_array[k] < first; k++) {
				g_array[k - 1] = g_array[k];
			}
			g_array[k - 1] = first;
		}
	}
   return NULL;
}

void swap(int* a, int* b)
{
   int temp = *a;
   *a = *b;
   *b = temp; 
}

void print(int* array, int size)
{
   int i = 0;
   for (i = 0; i < size; i++) {
      printf("%d ", array[i]);
   }
   printf("\n");
}
